plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink'               version '2.26.0'
    id 'jacoco'
    id 'org.javamodularity.moduleplugin' version "1.8.12"
}

group 'com.example'


repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '18'
targetCompatibility = '18'

application {
    mainModule = 'com.example.scheduler'
    mainClass = 'com.example.scheduler.Main'
    //mainClass = 'com.example.scheduler.SchedulerApp'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '18'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

javafx {
    version = '20.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing', 'javafx.graphics']
}


dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.6.0'
    implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
    implementation 'io.github.palexdev:virtualizedfx:11.9.3'
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('com.dustinredmond.fxtrayicon:FXTrayIcon:4.0.1')
    implementation('io.github.palexdev:materialfx:11.16.1')
    implementation ('org.openjfx:javafx-graphics:20.0.1')
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'junit:junit:4.13.2'
    implementation 'org.mindrot:jbcrypt:0.4'
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    useJUnitPlatform()
    jvmArgs = [
            '--add-exports=javafx.graphics/com.sun.javafx.application=org.testfx',
            '--add-opens=javafx.graphics/com.sun.javafx.application=org.testfx'
    ]
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}


/*
jlink {
    def os = org.gradle.internal.os.OperatingSystem.current()
    def pkgType = os.windows ? 'msi' : os.linux ? 'deb' : 'pkg'
    imageZip = project.file("${buildDir}/distributions/scheduler-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'app'
        noConsole = true
    }

    addExtraDependencies("javafx")
    forceMerge('log4j-api' )
    forceMerge ('jackson')
    addExtraDependencies("java.sql")

    jpackage {
        imageName = 'app'
        imageOptions = []

        if (os.macOsX) {
            imageOptions += ['--mac-package-identifier','app']
        }

        installerName = 'app'
        installerType = "${pkgType}"
        installerOptions = ['--resource-dir', "src/main/resources"]
        installerOptions += [
                '--vendor', 'Tomasz Holub',
                '--app-version', '1.0'
        ]


        if (os.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
        }

        if (os.macOsX) {
            installerOptions += ["--mac-package-name", "app"]
        }

        skipInstaller = false
    }
}


tasks.named("jpackageImage") {
    dependsOn jlinkZip
}

tasks.register('dist') {
    dependsOn clean, jpackage
    description "Calls clean and then jpackage [default]"
}

defaultTasks 'dist'


 */



jar {
    manifest {
        attributes 'Main-Class': 'com.example.scheduler.Main'
        //attributes 'Main-Class': 'com.example.scheduler.SchedulerApp'
    }
    configurations.compileClasspath.each { File file ->
        from(zipTree(file.absoluteFile))
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}



/*
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
        jvmArgs = ['-Djdk.gtk.version=2']
    }
    addExtraDependencies("javafx")
    forceMerge('log4j-api' )
    forceMerge ('jackson')
}

jlinkZip {
    group = 'distribution'
}

 */












